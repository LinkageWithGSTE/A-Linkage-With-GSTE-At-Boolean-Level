load "loadInv.fl";
let option = "-S -w -y";

let ANDS termList = itlist (\t.\pre. t AND pre) termList T; 
let ORS termList = itlist (\t.\pre. t OR pre) termList F; 

letrec invform2trajform_ant (boolIs (BOOLEAN v) c) = 
        let node = v in 
        let var = bvariable v in 
        Isb var node 
    /\ invform2trajform_ant (bitvecIs (BITVEC v i) c) =
        let node = map (\i. v^"<"^(int2str i)^">") (0 upto (i-1)) in 
        let var = map (\i. bvariable (v^"<"^(int2str i)^">")) (0 upto (i-1)) in  
        node bvAre var
    /\ invform2trajform_ant (arrayIs (ARRAY v i1 i2) a c) = 
        let node adr = map (\d. v^"<"^(int2str adr)^">"^"<"^(int2str d)^">") (0 upto (i2-1)) in 
        let var adr  = map (\d. bvariable (v^"<"^(int2str adr)^">"^"<"^(int2str d)^">")) (0 upto (i2-1)) in
        let nodes = node a in 
        let vars = var a in 
        nodes bvAre vars 
;
letrec inv2trajform_ant [] = [Chaos]
    /\ inv2trajform_ant (x:xs) = (invform2trajform_ant x):(inv2trajform_ant xs) ;


//******consequence******
letrec invform2trajform_consequence (boolIs (BOOLEAN v) c) = 
        let node = v in 
        let var = bvariable (v^"_") in 
        Next (Isb var node )
    /\ invform2trajform_consequence (bitvecIs (BITVEC v i) c) =
        let node = map (\i. v^"<"^(int2str i)^">") (0 upto (i-1)) in 
        let var = map (\i. bvariable (v^"<"^(int2str i)^">_")) (0 upto (i-1)) in  
        Next (node bvAre var)
    /\ invform2trajform_consequence (arrayIs (ARRAY v i1 i2) a c) = 
        let node adr = map (\d. v^"<"^(int2str adr)^">"^"<"^(int2str d)^">") (0 upto (i2-1)) in 
        let var adr  = map (\d. bvariable (v^"<"^(int2str adr)^">"^"<"^(int2str d)^">_")) (0 upto (i2-1)) in
        let nodes = node a in 
        let vars = var a in 
        Next (nodes bvAre vars )
;

letrec inv2trajform_consequence [] = []
    /\ inv2trajform_consequence (x:xs) = (invform2trajform_consequence x):(inv2trajform_consequence xs) ;


//universal STE
let uSTE option model weak ant cons trace_list constraints source sink =
    constraints = [] => (
       STE option model weak ant cons trace_list 
    ) | (
        let all_cnstr = itlist (\c.\pre. c bAND pre) constraints bT in
        let cnstr_bdd = hd (bexpr2bdd [] [all_cnstr]) in
        cSTE ([], [cnstr_bdd]) option model weak ant cons trace_list 
    )
;



let check_edge source sink = 
    let inv_source  = get_inv tbl source in 
    let inv_sink = get_inv tbl sink in 
    let input_ant = input_ant source sink in 
    let inv_ant_t = map (\x. TAndList (inv2trajform_ant x)) inv_source in 
    let cons_t = map (\x. TAndList (inv2trajform_consequence x)) inv_sink in 

    let cnstr_input = input_constraint source sink in  
    let cnstr_mu = map (\t. inv2trajform_constraint_ant t) inv_source in 
    let cnstr_nmu = map (\t. inv2trajform_constraint_consequence t) inv_sink in  

    let inv_ant = el 2 inv_ant_t in 
    let ant = trajForm2FiveTuples (TAndList [inv_ant,input_ant]) in 
    let len = length cons_t in 
    let cons i = trajForm2FiveTuples (el i cons_t ) in 
    let cnstr i =  cnstr_input bAND (el i cnstr_mu) bAND  (el i cnstr_nmu) in 

    let f i =
        let ant = trajForm2FiveTuples (TAndList [(el i inv_ant_t),input_ant]) in
        let cons j  = trajForm2FiveTuples (el j cons_t ) in
        let cnstr_mu = (el i cnstr_mu) in
        let cnstr_nmu j = (el j cnstr_nmu) in
        let cnstr j  =  cnstr_input bAND cnstr_mu bAND  (cnstr_nmu j) in 
        ORS (map (\j. uSTE option ckt [] ant (cons j ) []  [(cnstr j )] source  sink) (1 upto len) ) in 

    ANDS (map (\i. f i) (1 upto len))  ;


map (\(EDGE source sink). check_edge source sink) (edge_list);
quit;



    


